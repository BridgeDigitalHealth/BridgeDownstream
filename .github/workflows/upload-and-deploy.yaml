name: upload-and-deploy

on: [push]

env:
  REPO_NAME: ${{ github.event.repository.name }}
  CFN_BUCKET: sceptre-cloudformation-bucket-bucket-65ci2qog5w6l
  NAMESPACE: bridge-downstream

jobs:

  pre-commit:

    name: Run pre-commit hooks against all files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  unit-tests:
    name: Run Pytest unit tests
    needs: pre-commit
    environment: develop
    runs-on: ubuntu-latest
    container:
      image: philsnyder/bridge-downstream-pytest:latest
      env:
        DISABLE_SSL: true
      options: "--user root"
    steps:

      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.CI_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200

      - uses: actions/checkout@v2

      - run: chown -R glue_user $GITHUB_WORKSPACE

      - run: su - glue_user --command "aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID"
      - run: su - glue_user --command "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
      - run: su - glue_user --command "aws configure set aws_session_token $AWS_SESSION_TOKEN"
      - run: su - glue_user --command "aws configure set region $AWS_REGION"

      - name: Run Pytest unit tests
        run: su - glue_user --command "cd $GITHUB_WORKSPACE && python3 -m pytest --namespace $GITHUB_REF_NAME --artifact-bucket $CFN_BUCKET"

  upload-files:

    name: Upload files to S3 bucket
    runs-on: ubuntu-latest
    needs: unit-tests
    environment: develop
    steps:

      - name: Setup code, pipenv, aws
        uses: Sage-Bionetworks/action-pipenv-aws-setup@v1
        with:
          aws_access_key_id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          role_to_assume: ${{ secrets.CI_ROLE_TO_ASSUME }}

      - name: Setup sam
        uses: aws-actions/setup-sam@v1
        with:
          version: 1.37.0

      - name: Set namespace for non-default branch or for tag
        if: github.ref_name != 'main'
        run: echo "NAMESPACE=$GITHUB_REF_NAME" >> $GITHUB_ENV

      - name: Copy files to templates bucket
        run: python src/scripts/manage_artifacts/artifacts.py --upload --ref $GITHUB_REF_NAME

  sceptre-deploy-branch:
    name: Deploy branch using sceptre
    runs-on: ubuntu-latest
    needs: upload-files
    env:
      NAMESPACE: $GITHUB_REF_NAME
    if: github.ref_name != 'main' && github.ref_type != 'tag'
    environment: develop

    steps:
      - name: Setup code, pipenv, aws
        uses: Sage-Bionetworks/action-pipenv-aws-setup@v1
        with:
          aws_access_key_id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          role_to_assume: ${{ secrets.CI_ROLE_TO_ASSUME }}

      - name: Create directory for remote sceptre templates
        run: mkdir -p templates/remote/

      - name: Deploy sceptre stacks
        run: pipenv run sceptre --var "namespace=${{ env.NAMESPACE }}" launch develop --yes

  integration-test:
    name: Deploys test events from the workflow
    runs-on: ubuntu-latest
    needs: sceptre-deploy-branch
    env:
      NAMESPACE: $GITHUB_REF_NAME
      LEMBDA_ENV_VARS_FILE: namespace_vars.json
    if: github.ref_name != 'main' && github.ref_type != 'tag'
    environment: develop
    steps:

      - name: Setup code, pipenv, aws
        uses: Sage-Bionetworks/action-pipenv-aws-setup@v1
        with:
          aws_access_key_id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          role_to_assume: ${{ secrets.CI_ROLE_TO_ASSUME }}

      - name: Setup sam
        uses: aws-actions/setup-sam@v1
        with:
          version: 1.37.0

      - name: sam build lambda
        run: sam build -s src/lambda/ -t src/lambda/template.yaml

      - name: Invoke Lambda
        run:  sam local invoke -e src/lambda/events/single-record.json --env-vars src/lambda/test-env-vars.json

  sceptre-deploy-main:
    name: Deploy trunk using sceptre
    runs-on: ubuntu-latest
    needs: [pre-commit, unit-tests, upload-files]
    if: github.ref_name == 'main' && github.ref_type != 'tag'

    strategy:
      matrix:
        job-environment:
          - develop
          - prod

        include:
          - job-environment: develop
            sceptre-environment: develop

          - job-environment: prod
            sceptre-environment: prod

    environment: ${{ matrix.job-environment }}

    steps:
      - name: Setup code, pipenv, aws
        uses: Sage-Bionetworks/action-pipenv-aws-setup@v1
        with:
          aws_access_key_id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          role_to_assume: ${{ secrets.CI_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bootstrap_trigger
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src/scripts/bootstrap_trigger/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create directory for remote sceptre templates
        run: mkdir -p templates/remote/

      - name: Deploy sceptre stacks
        run: pipenv run sceptre --var "namespace=${{ env.NAMESPACE }}" launch ${{ matrix.sceptre-environment }} --yes
