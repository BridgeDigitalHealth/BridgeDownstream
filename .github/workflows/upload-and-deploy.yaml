name: upload-and-deploy

on:
  push:
    branches: [ develop, prod ]

env:
  REPO_NAME: ${{ github.event.repository.name }}
  CFN_BUCKET: ${{ vars.CFN_BUCKET }}
  NAMESPACE: bridge-downstream

jobs:

  pre-commit:

    name: Run pre-commit hooks against all files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  upload-files:

    name: Upload files to S3 bucket
    runs-on: ubuntu-latest
    needs: pre-commit
    environment: ${{ github.ref_name }}
    steps:

      - name: Setup code, pipenv, aws
        uses: Sage-Bionetworks/action-pipenv-aws-setup@v1
        with:
          aws_access_key_id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          role_to_assume: ${{ secrets.CI_ROLE_TO_ASSUME }}

      - name: Setup sam
        uses: aws-actions/setup-sam@v1
        with:
          version: 1.37.0

      - name: Copy files to templates bucket
        run: python src/scripts/manage_artifacts/artifacts.py --upload --ref $NAMESPACE

        # Hardcode --ref as stopgap for actual job script versioning
      - name: Copy Glue scripts to templates bucket
        run: python src/scripts/manage_artifacts/artifacts.py --upload --ref "v0.1"

  pytest-docker:
    name: Build and push testing docker image to ECR
    needs: upload-files
    runs-on: ubuntu-latest
    if: github.ref_name == 'develop'
    environment: develop
    steps:
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.CI_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          mask-aws-account-id: false
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get ECR secret names
        id: ecr
        run: |
          usernameKey=docker_username_$(echo ${{ steps.login-ecr.outputs.registry }} | tr '.-' _)
          echo "::set-output name=username-key::$usernameKey"
          passwordKey=docker_password_$(echo ${{ steps.login-ecr.outputs.registry }} | tr '.-' _)
          echo "::set-output name=password-key::$passwordKey"
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push to ECR
        id: docker-build-push
        uses: docker/build-push-action@v3
        env:
          DOCKER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/pytest:${{ github.ref_name }}
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          file: tests/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
    outputs:
      docker-metadata: ${{ steps.docker-build-push.outputs.metadata }}
      ecr-username: ${{ steps.login-ecr.outputs[steps.ecr.outputs.username-key] }}
      ecr-password: ${{ steps.login-ecr.outputs[steps.ecr.outputs.password-key] }}

  unit-tests:
    name: Run Pytest unit tests
    needs: pytest-docker
    if: github.ref_name == 'develop'
    environment: develop
    runs-on: ubuntu-latest
    container:
      image: ${{ fromJSON(needs.pytest-docker.outputs.docker-metadata)['image.name'] }}
      credentials:
        username: ${{ needs.pytest-docker.outputs.ecr-username }}
        password: ${{ needs.pytest-docker.outputs.ecr-password }}
      env:
        DISABLE_SSL: true
      options: "--user root"
    steps:
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.CI_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
      - uses: actions/checkout@v2
      - run: chown -R glue_user $GITHUB_WORKSPACE
      - run: su - glue_user --command "aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID"
      - run: su - glue_user --command "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
      - run: su - glue_user --command "aws configure set aws_session_token $AWS_SESSION_TOKEN"
      - run: su - glue_user --command "aws configure set region $AWS_REGION"
      - name: Run Pytest unit tests
        run: su - glue_user --command "cd $GITHUB_WORKSPACE && python3 -m pytest --namespace $NAMESPACE --artifact-bucket $CFN_BUCKET"

  integration-test:
    name: Deploys test events from the workflow
    runs-on: ubuntu-latest
    needs: sceptre-deploy-main
    env:
      NAMESPACE: $GITHUB_REF_NAME
      LEMBDA_ENV_VARS_FILE: namespace_vars.json
    if: github.ref_name == 'develop'
    environment: develop
    steps:

      - name: Setup code, pipenv, aws
        uses: Sage-Bionetworks/action-pipenv-aws-setup@v1
        with:
          aws_access_key_id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          role_to_assume: ${{ secrets.CI_ROLE_TO_ASSUME }}

      - name: Setup sam
        uses: aws-actions/setup-sam@v1
        with:
          version: 1.37.0

      - name: sam build lambda
        run: sam build -s src/lambda/ -t src/lambda/template.yaml

      - name: Invoke Lambda
        run: sam local invoke -e src/lambda/events/single-record.json --env-vars src/lambda/test-env-vars.json

  sceptre-deploy-main:
    name: Deploy trunk using sceptre
    runs-on: ubuntu-latest
    needs: upload-files
    environment: ${{ github.ref_name }}
    steps:
      - name: Setup code, pipenv, aws
        uses: Sage-Bionetworks/action-pipenv-aws-setup@v1
        with:
          aws_access_key_id: ${{ secrets.CI_USER_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_USER_SECRET_ACCESS_KEY }}
          role_to_assume: ${{ secrets.CI_ROLE_TO_ASSUME }}

      - name: Copy files to templates bucket
        run: python src/scripts/manage_artifacts/artifacts.py --environment ${{ github.ref_name }} --upload --ref $NAMESPACE

        # Hardcode --ref as stopgap for actual job script versioning
      - name: Copy Glue scripts to templates bucket
        run: python src/scripts/manage_artifacts/artifacts.py --environment ${{ github.ref_name }} --upload --ref "v0.1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bootstrap_trigger
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src/scripts/bootstrap_trigger/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create directory for remote sceptre templates
        run: mkdir -p templates/remote/

      - name: Deploy sceptre stacks
        run: pipenv run sceptre --var "namespace=${{ env.NAMESPACE }}" launch ${{ github.ref_name }} --yes
